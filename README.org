* Mike Russo's Take Home Test for Fetch Rewards

** The task
#+begin_quote
You first should have users enter their name and email on a login screen. Then, you should use this information to hit our login endpoint to authenticate with our service (see API Reference below).

Once a user is successfully authenticated, they should be brought to a search page where they can browse available dogs. This page must meet the following requirements:

    Users must be able to filter by breed
    Results should be paginated
    Results should be sorted alphabetically by breed by default. Users should be able to modify this sort to be ascending or descending.
    All fields of the Dog object (except for id) must be presented in some form

Users should be able to select their favorite dogs from the search results. When finished searching, they should be able to generate a match based on dogs added to the favorites list. A single match will be generated by sending all favorited dog IDs to the /dogs/match endpoint. You should display this match however you see fit.

As for everything else, you have free rein, so get creative! We strongly encourage you to go beyond the minimum requirements to build something that showcases your strengths.

You may find it helpful to make use of a component library.
#+end_quote
Also, host it somewhere.  We will do Cloudflare.
** Breakdown
*** TODO Login page
*** TODO Main/search page
**** TODO Search input
- filter by breed
**** TODO Results area
- paginated
- alphabetically by breed, user option to change sort up or down
**** TODO Item box
All info plus checkbox to select as favorite
**** TODO Favorites area
*** TODO Its a match page/modal
*** TODO style it
*** TODO Host it
** NEXT Dev log
:LOGBOOK:
CLOCK: [2025-02-03 Mon 08:53]
:END:
Ok I have started my clock.

Plan of attack: vite and react(-router), we will keep it client side react because we have to host it.  Leave styling till the end? Or use components from beginning?  You can get burned by both.
